{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-15T00:23:15.488Z",
    "end": "2024-08-15T00:23:20.932Z",
    "duration": 5444,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4607e840-08d6-4521-b3c9-3e6feec9659c",
      "title": "",
      "fullFile": "C:\\Users\\giorg\\OneDrive\\Desktop\\advancedSelenium\\tests\\elements\\textBox.js",
      "file": "\\tests\\elements\\textBox.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "29e64787-6719-4f94-a9d4-3572aaac6a50",
          "title": "Test the website.",
          "fullFile": "C:\\Users\\giorg\\OneDrive\\Desktop\\advancedSelenium\\tests\\elements\\textBox.js",
          "file": "\\tests\\elements\\textBox.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test the website.\"",
              "fullTitle": "Test the website. \"before all\" hook in \"Test the website.\"",
              "timedOut": false,
              "duration": 1377,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.manage().window().maximize();",
              "err": {},
              "uuid": "8bcb8b45-e7e8-449a-82a8-5404d1610ef0",
              "parentUUID": "29e64787-6719-4f94-a9d4-3572aaac6a50",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test the website.\"",
              "fullTitle": "Test the website. \"after all\" hook in \"Test the website.\"",
              "timedOut": false,
              "duration": 67,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "63e4a3f0-581f-471e-9adb-0ee9ac935778",
              "parentUUID": "29e64787-6719-4f94-a9d4-3572aaac6a50",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "First test is this.",
              "fullTitle": "Test the website. First test is this.",
              "timedOut": false,
              "duration": 3990,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get(\"https://demoqa.com/text-box\");\nconst waitTime = 5000;\nasync function filler(byLocator, timer) {\n  try {\n    let element = await driver.wait(until.elementLocated(byLocator), timer);\n    return element;\n  } catch (error) {\n    console.error(\"Error for locator:\", error);\n    throw error;\n  }\n}\nconst arr = [\n  { tUser: \"User\" },\n  { tEmail: \"user@gmail.com\" },\n  { tAddres: \"Random address N777\" },\n  { tPeraddres: \"Random permanent address N777\" },\n];\ntry {\n  let username = await filler(By.id(\"userName\"), waitTime);\n  await username.sendKeys(arr[0].tUser);\n  let usernameValue = await username.getAttribute(\"value\");\n  expect(usernameValue).to.equal(arr[0].tUser);\n  let userEmail = await filler(By.id(\"userEmail\"), waitTime);\n  await userEmail.sendKeys(arr[1].tEmail);\n  let userEmailValue = await userEmail.getAttribute(\"value\");\n  expect(userEmailValue).to.equal(arr[1].tEmail);\n  let currentAddress = await filler(By.id(\"currentAddress\"), waitTime);\n  await currentAddress.sendKeys(arr[2].tAddres);\n  let currentAddressValue = await currentAddress.getAttribute(\"value\");\n  expect(currentAddressValue).to.equal(arr[2].tAddres);\n  let permanentAddress = await filler(By.id(\"permanentAddress\"), waitTime);\n  await permanentAddress.sendKeys(arr[3].tPeraddres, Key.RETURN);\n  let permanentAddressValue = await permanentAddress.getAttribute(\"value\");\n  expect(permanentAddressValue.trim()).to.equal(arr[3].tPeraddres);\n} catch (error) {\n  console.error(\"Error has been caught\", error);\n}",
              "err": {},
              "uuid": "9747b658-6356-4df9-8a1a-21b60d9cb6b2",
              "parentUUID": "29e64787-6719-4f94-a9d4-3572aaac6a50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9747b658-6356-4df9-8a1a-21b60d9cb6b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3990,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}